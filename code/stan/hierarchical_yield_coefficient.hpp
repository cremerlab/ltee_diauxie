
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace hierarchical_yield_coefficient_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 24, column 4 to column 26)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 25, column 4 to column 26)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 26, column 4 to column 35)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 29, column 4 to column 38)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 30, column 4 to column 41)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 31, column 4 to column 29)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 32, column 4 to column 41)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 35, column 4 to column 31)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 36, column 4 to column 31)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 39, column 4 to column 35)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 43, column 4 to column 77)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 44, column 4 to column 143)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 45, column 4 to column 62)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 77, column 4 to column 80)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 78, column 4 to column 75)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 79, column 4 to column 75)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 80, column 4 to column 76)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 81, column 4 to column 76)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 51, column 4 to column 36)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 52, column 4 to column 36)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 53, column 4 to column 36)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 56, column 4 to column 39)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 57, column 4 to column 39)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 58, column 4 to column 44)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 59, column 4 to column 44)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 62, column 4 to column 75)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 63, column 4 to column 75)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 66, column 4 to column 36)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 69, column 4 to column 102)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 72, column 4 to column 113)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 3, column 4 to column 19)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 4, column 4 to column 25)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 5, column 4 to column 25)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 6, column 30 to column 37)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 6, column 4 to column 39)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 9, column 20 to column 27)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 9, column 4 to column 40)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 10, column 20 to column 27)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 10, column 4 to column 45)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 13, column 20 to column 27)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 13, column 4 to column 45)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 14, column 20 to column 27)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 14, column 4 to column 45)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 18, column 11 to column 18)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 18, column 4 to column 85)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 19, column 11 to column 18)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 19, column 4 to column 104)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 35, column 11 to column 12)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 36, column 11 to column 12)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 77, column 11 to column 18)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 78, column 11 to column 12)",
                                                      " (in '/Users/gchure/Dropbox/git/postdoc_projects/ltee_diauxie/code/stan/hierarchical_yield_coefficient.stan', line 79, column 11 to column 12)"};



class hierarchical_yield_coefficient_model final : public model_base_crtp<hierarchical_yield_coefficient_model> {

 private:
  int J;
  int N_yield;
  int N_calib;
  std::vector<int> idx;
  Eigen::Matrix<double, -1, 1> calib_conc;
  Eigen::Matrix<double, -1, 1> calib_rel_areas;
  Eigen::Matrix<double, -1, 1> optical_density;
  Eigen::Matrix<double, -1, 1> yield_rel_areas;
  Eigen::Matrix<double, -1, 1> centered_conc;
  Eigen::Matrix<double, -1, 1> centered_rel_area;
 
 public:
  ~hierarchical_yield_coefficient_model() { }
  
  inline std::string model_name() const final { return "hierarchical_yield_coefficient_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  hierarchical_yield_coefficient_model(stan::io::var_context& context__,
                                       unsigned int random_seed__ = 0,
                                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "hierarchical_yield_coefficient_model_namespace::hierarchical_yield_coefficient_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 31;
      context__.validate_dims("data initialization","J","int",
          context__.to_vec());
      J = std::numeric_limits<int>::min();
      
      current_statement__ = 31;
      J = context__.vals_i("J")[(1 - 1)];
      current_statement__ = 31;
      current_statement__ = 31;
      check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 32;
      context__.validate_dims("data initialization","N_yield","int",
          context__.to_vec());
      N_yield = std::numeric_limits<int>::min();
      
      current_statement__ = 32;
      N_yield = context__.vals_i("N_yield")[(1 - 1)];
      current_statement__ = 32;
      current_statement__ = 32;
      check_greater_or_equal(function__, "N_yield", N_yield, 1);
      current_statement__ = 33;
      context__.validate_dims("data initialization","N_calib","int",
          context__.to_vec());
      N_calib = std::numeric_limits<int>::min();
      
      current_statement__ = 33;
      N_calib = context__.vals_i("N_calib")[(1 - 1)];
      current_statement__ = 33;
      current_statement__ = 33;
      check_greater_or_equal(function__, "N_calib", N_calib, 1);
      current_statement__ = 34;
      validate_non_negative_index("idx", "N_yield", N_yield);
      current_statement__ = 35;
      context__.validate_dims("data initialization","idx","int",
          context__.to_vec(N_yield));
      idx = std::vector<int>(N_yield, std::numeric_limits<int>::min());
      
      current_statement__ = 35;
      assign(idx, nil_index_list(), context__.vals_i("idx"),
        "assigning variable idx");
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= N_yield; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_greater_or_equal(function__, "idx[sym1__]", idx[(sym1__ - 1)],
                               1);}
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= N_yield; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_less_or_equal(function__, "idx[sym1__]", idx[(sym1__ - 1)], J);
      }
      current_statement__ = 36;
      validate_non_negative_index("calib_conc", "N_calib", N_calib);
      current_statement__ = 37;
      context__.validate_dims("data initialization","calib_conc","double",
          context__.to_vec(N_calib));
      calib_conc = Eigen::Matrix<double, -1, 1>(N_calib);
      stan::math::fill(calib_conc, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> calib_conc_flat__;
        current_statement__ = 37;
        assign(calib_conc_flat__, nil_index_list(),
          context__.vals_r("calib_conc"),
          "assigning variable calib_conc_flat__");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= N_calib; ++sym1__) {
          current_statement__ = 37;
          assign(calib_conc, cons_list(index_uni(sym1__), nil_index_list()),
            calib_conc_flat__[(pos__ - 1)], "assigning variable calib_conc");
          current_statement__ = 37;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= N_calib; ++sym1__) {
        current_statement__ = 37;
        current_statement__ = 37;
        check_greater_or_equal(function__, "calib_conc[sym1__]",
                               calib_conc[(sym1__ - 1)], 0);}
      current_statement__ = 38;
      validate_non_negative_index("calib_rel_areas", "N_calib", N_calib);
      current_statement__ = 39;
      context__.validate_dims("data initialization","calib_rel_areas",
          "double",context__.to_vec(N_calib));
      calib_rel_areas = Eigen::Matrix<double, -1, 1>(N_calib);
      stan::math::fill(calib_rel_areas, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> calib_rel_areas_flat__;
        current_statement__ = 39;
        assign(calib_rel_areas_flat__, nil_index_list(),
          context__.vals_r("calib_rel_areas"),
          "assigning variable calib_rel_areas_flat__");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= N_calib; ++sym1__) {
          current_statement__ = 39;
          assign(calib_rel_areas,
            cons_list(index_uni(sym1__), nil_index_list()),
            calib_rel_areas_flat__[(pos__ - 1)],
            "assigning variable calib_rel_areas");
          current_statement__ = 39;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= N_calib; ++sym1__) {
        current_statement__ = 39;
        current_statement__ = 39;
        check_greater_or_equal(function__, "calib_rel_areas[sym1__]",
                               calib_rel_areas[(sym1__ - 1)], 0);}
      current_statement__ = 40;
      validate_non_negative_index("optical_density", "N_yield", N_yield);
      current_statement__ = 41;
      context__.validate_dims("data initialization","optical_density",
          "double",context__.to_vec(N_yield));
      optical_density = Eigen::Matrix<double, -1, 1>(N_yield);
      stan::math::fill(optical_density, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> optical_density_flat__;
        current_statement__ = 41;
        assign(optical_density_flat__, nil_index_list(),
          context__.vals_r("optical_density"),
          "assigning variable optical_density_flat__");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= N_yield; ++sym1__) {
          current_statement__ = 41;
          assign(optical_density,
            cons_list(index_uni(sym1__), nil_index_list()),
            optical_density_flat__[(pos__ - 1)],
            "assigning variable optical_density");
          current_statement__ = 41;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 41;
      for (int sym1__ = 1; sym1__ <= N_yield; ++sym1__) {
        current_statement__ = 41;
        current_statement__ = 41;
        check_greater_or_equal(function__, "optical_density[sym1__]",
                               optical_density[(sym1__ - 1)], 0);}
      current_statement__ = 42;
      validate_non_negative_index("yield_rel_areas", "N_yield", N_yield);
      current_statement__ = 43;
      context__.validate_dims("data initialization","yield_rel_areas",
          "double",context__.to_vec(N_yield));
      yield_rel_areas = Eigen::Matrix<double, -1, 1>(N_yield);
      stan::math::fill(yield_rel_areas, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> yield_rel_areas_flat__;
        current_statement__ = 43;
        assign(yield_rel_areas_flat__, nil_index_list(),
          context__.vals_r("yield_rel_areas"),
          "assigning variable yield_rel_areas_flat__");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= N_yield; ++sym1__) {
          current_statement__ = 43;
          assign(yield_rel_areas,
            cons_list(index_uni(sym1__), nil_index_list()),
            yield_rel_areas_flat__[(pos__ - 1)],
            "assigning variable yield_rel_areas");
          current_statement__ = 43;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 43;
      for (int sym1__ = 1; sym1__ <= N_yield; ++sym1__) {
        current_statement__ = 43;
        current_statement__ = 43;
        check_greater_or_equal(function__, "yield_rel_areas[sym1__]",
                               yield_rel_areas[(sym1__ - 1)], 0);}
      current_statement__ = 44;
      validate_non_negative_index("centered_conc", "N_calib", N_calib);
      current_statement__ = 45;
      centered_conc = Eigen::Matrix<double, -1, 1>(N_calib);
      stan::math::fill(centered_conc, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 45;
      assign(centered_conc, nil_index_list(),
        divide(subtract(calib_conc, mean(calib_conc)), sd(calib_conc)),
        "assigning variable centered_conc");
      current_statement__ = 46;
      validate_non_negative_index("centered_rel_area", "N_calib", N_calib);
      current_statement__ = 47;
      centered_rel_area = Eigen::Matrix<double, -1, 1>(N_calib);
      stan::math::fill(centered_rel_area, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 47;
      assign(centered_rel_area, nil_index_list(),
        divide(subtract(calib_rel_areas, mean(calib_rel_areas)),
          sd(calib_rel_areas)), "assigning variable centered_rel_area");
      current_statement__ = 48;
      validate_non_negative_index("yield_inter_area", "J", J);
      current_statement__ = 49;
      validate_non_negative_index("yield_slope_area", "J", J);
      current_statement__ = 50;
      validate_non_negative_index("yield_concs", "N_yield", N_yield);
      current_statement__ = 51;
      validate_non_negative_index("yield_inter", "J", J);
      current_statement__ = 52;
      validate_non_negative_index("yield_slope", "J", J);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += J;
      num_params_r__ += J;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "hierarchical_yield_coefficient_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ calib_slope_cent;
      calib_slope_cent = DUMMY_VAR__;
      
      current_statement__ = 1;
      calib_slope_cent = in__.scalar();
      local_scalar_t__ calib_inter_cent;
      calib_inter_cent = DUMMY_VAR__;
      
      current_statement__ = 2;
      calib_inter_cent = in__.scalar();
      local_scalar_t__ calib_sigma_cent;
      calib_sigma_cent = DUMMY_VAR__;
      
      current_statement__ = 3;
      calib_sigma_cent = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        calib_sigma_cent = stan::math::lb_constrain(calib_sigma_cent, 0, lp__);
      } else {
        current_statement__ = 3;
        calib_sigma_cent = stan::math::lb_constrain(calib_sigma_cent, 0);
      }
      local_scalar_t__ yield_inter_area_mu;
      yield_inter_area_mu = DUMMY_VAR__;
      
      current_statement__ = 4;
      yield_inter_area_mu = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        yield_inter_area_mu = stan::math::lb_constrain(yield_inter_area_mu,
                                0, lp__);
      } else {
        current_statement__ = 4;
        yield_inter_area_mu = stan::math::lb_constrain(yield_inter_area_mu, 0);
      }
      local_scalar_t__ yield_inter_area_sigma;
      yield_inter_area_sigma = DUMMY_VAR__;
      
      current_statement__ = 5;
      yield_inter_area_sigma = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        yield_inter_area_sigma = stan::math::lb_constrain(
                                   yield_inter_area_sigma, 0, lp__);
      } else {
        current_statement__ = 5;
        yield_inter_area_sigma = stan::math::lb_constrain(
                                   yield_inter_area_sigma, 0);
      }
      local_scalar_t__ yield_slope_area_mu;
      yield_slope_area_mu = DUMMY_VAR__;
      
      current_statement__ = 6;
      yield_slope_area_mu = in__.scalar();
      local_scalar_t__ yield_slope_area_sigma;
      yield_slope_area_sigma = DUMMY_VAR__;
      
      current_statement__ = 7;
      yield_slope_area_sigma = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        yield_slope_area_sigma = stan::math::lb_constrain(
                                   yield_slope_area_sigma, 0, lp__);
      } else {
        current_statement__ = 7;
        yield_slope_area_sigma = stan::math::lb_constrain(
                                   yield_slope_area_sigma, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> yield_inter_area;
      yield_inter_area = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
      stan::math::fill(yield_inter_area, DUMMY_VAR__);
      
      current_statement__ = 8;
      yield_inter_area = in__.vector(J);
      Eigen::Matrix<local_scalar_t__, -1, 1> yield_slope_area;
      yield_slope_area = Eigen::Matrix<local_scalar_t__, -1, 1>(J);
      stan::math::fill(yield_slope_area, DUMMY_VAR__);
      
      current_statement__ = 9;
      yield_slope_area = in__.vector(J);
      local_scalar_t__ yield_area_sigma;
      yield_area_sigma = DUMMY_VAR__;
      
      current_statement__ = 10;
      yield_area_sigma = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        yield_area_sigma = stan::math::lb_constrain(yield_area_sigma, 0, lp__);
      } else {
        current_statement__ = 10;
        yield_area_sigma = stan::math::lb_constrain(yield_area_sigma, 0);
      }
      local_scalar_t__ calib_slope;
      calib_slope = DUMMY_VAR__;
      
      current_statement__ = 11;
      calib_slope = ((calib_slope_cent * sd(calib_rel_areas)) /
                      sd(calib_conc));
      local_scalar_t__ calib_inter;
      calib_inter = DUMMY_VAR__;
      
      current_statement__ = 12;
      calib_inter = ((sd(calib_rel_areas) *
                       (calib_inter_cent -
                         ((calib_slope_cent * mean(calib_conc)) /
                           sd(calib_conc)))) + mean(calib_rel_areas));
      local_scalar_t__ calib_sigma;
      calib_sigma = DUMMY_VAR__;
      
      current_statement__ = 13;
      calib_sigma = (sd(calib_rel_areas) * calib_sigma_cent);
      {
        current_statement__ = 19;
        lp_accum__.add(std_normal_lpdf<propto__>(calib_inter_cent));
        current_statement__ = 20;
        lp_accum__.add(std_normal_lpdf<propto__>(calib_slope_cent));
        current_statement__ = 21;
        lp_accum__.add(std_normal_lpdf<propto__>(calib_sigma_cent));
        current_statement__ = 22;
        lp_accum__.add(std_normal_lpdf<propto__>(yield_inter_area_mu));
        current_statement__ = 23;
        lp_accum__.add(std_normal_lpdf<propto__>(yield_slope_area_mu));
        current_statement__ = 24;
        lp_accum__.add(normal_lpdf<propto__>(yield_inter_area_sigma, 0, 0.1));
        current_statement__ = 25;
        lp_accum__.add(normal_lpdf<propto__>(yield_slope_area_sigma, 0, 0.1));
        current_statement__ = 26;
        lp_accum__.add(
          normal_lpdf<propto__>(yield_inter_area, yield_inter_area_mu,
            yield_inter_area_sigma));
        current_statement__ = 27;
        lp_accum__.add(
          normal_lpdf<propto__>(yield_slope_area, yield_slope_area_mu,
            yield_slope_area_sigma));
        current_statement__ = 28;
        lp_accum__.add(std_normal_lpdf<propto__>(yield_area_sigma));
        current_statement__ = 29;
        lp_accum__.add(
          normal_lpdf<propto__>(centered_rel_area,
            add(multiply(calib_slope_cent, centered_conc), calib_inter_cent),
            calib_sigma_cent));
        current_statement__ = 30;
        lp_accum__.add(
          normal_lpdf<propto__>(yield_rel_areas,
            add(
              elt_multiply(
                rvalue(yield_slope_area,
                  cons_list(index_multi(idx), nil_index_list()),
                  "yield_slope_area"), optical_density),
              rvalue(yield_inter_area,
                cons_list(index_multi(idx), nil_index_list()),
                "yield_inter_area")), yield_area_sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "hierarchical_yield_coefficient_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double calib_slope_cent;
      calib_slope_cent = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      calib_slope_cent = in__.scalar();
      double calib_inter_cent;
      calib_inter_cent = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      calib_inter_cent = in__.scalar();
      double calib_sigma_cent;
      calib_sigma_cent = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      calib_sigma_cent = in__.scalar();
      current_statement__ = 3;
      calib_sigma_cent = stan::math::lb_constrain(calib_sigma_cent, 0);
      double yield_inter_area_mu;
      yield_inter_area_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      yield_inter_area_mu = in__.scalar();
      current_statement__ = 4;
      yield_inter_area_mu = stan::math::lb_constrain(yield_inter_area_mu, 0);
      double yield_inter_area_sigma;
      yield_inter_area_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      yield_inter_area_sigma = in__.scalar();
      current_statement__ = 5;
      yield_inter_area_sigma = stan::math::lb_constrain(
                                 yield_inter_area_sigma, 0);
      double yield_slope_area_mu;
      yield_slope_area_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      yield_slope_area_mu = in__.scalar();
      double yield_slope_area_sigma;
      yield_slope_area_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      yield_slope_area_sigma = in__.scalar();
      current_statement__ = 7;
      yield_slope_area_sigma = stan::math::lb_constrain(
                                 yield_slope_area_sigma, 0);
      Eigen::Matrix<double, -1, 1> yield_inter_area;
      yield_inter_area = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(yield_inter_area, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      yield_inter_area = in__.vector(J);
      Eigen::Matrix<double, -1, 1> yield_slope_area;
      yield_slope_area = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(yield_slope_area, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      yield_slope_area = in__.vector(J);
      double yield_area_sigma;
      yield_area_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      yield_area_sigma = in__.scalar();
      current_statement__ = 10;
      yield_area_sigma = stan::math::lb_constrain(yield_area_sigma, 0);
      double calib_slope;
      calib_slope = std::numeric_limits<double>::quiet_NaN();
      
      double calib_inter;
      calib_inter = std::numeric_limits<double>::quiet_NaN();
      
      double calib_sigma;
      calib_sigma = std::numeric_limits<double>::quiet_NaN();
      
      vars__.emplace_back(calib_slope_cent);
      vars__.emplace_back(calib_inter_cent);
      vars__.emplace_back(calib_sigma_cent);
      vars__.emplace_back(yield_inter_area_mu);
      vars__.emplace_back(yield_inter_area_sigma);
      vars__.emplace_back(yield_slope_area_mu);
      vars__.emplace_back(yield_slope_area_sigma);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(yield_inter_area[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(yield_slope_area[(sym1__ - 1)]);}
      vars__.emplace_back(yield_area_sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      calib_slope = ((calib_slope_cent * sd(calib_rel_areas)) /
                      sd(calib_conc));
      current_statement__ = 12;
      calib_inter = ((sd(calib_rel_areas) *
                       (calib_inter_cent -
                         ((calib_slope_cent * mean(calib_conc)) /
                           sd(calib_conc)))) + mean(calib_rel_areas));
      current_statement__ = 13;
      calib_sigma = (sd(calib_rel_areas) * calib_sigma_cent);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(calib_slope);
        vars__.emplace_back(calib_inter);
        vars__.emplace_back(calib_sigma);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> yield_concs;
      yield_concs = Eigen::Matrix<double, -1, 1>(N_yield);
      stan::math::fill(yield_concs, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      assign(yield_concs, nil_index_list(),
        divide(subtract(yield_rel_areas, calib_inter), calib_slope),
        "assigning variable yield_concs");
      Eigen::Matrix<double, -1, 1> yield_inter;
      yield_inter = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(yield_inter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 15;
      assign(yield_inter, nil_index_list(),
        divide(subtract(yield_inter_area, calib_inter), calib_slope),
        "assigning variable yield_inter");
      Eigen::Matrix<double, -1, 1> yield_slope;
      yield_slope = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(yield_slope, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 16;
      assign(yield_slope, nil_index_list(),
        divide(subtract(yield_slope_area, calib_inter), calib_slope),
        "assigning variable yield_slope");
      double yield_inter_mu;
      yield_inter_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      yield_inter_mu = ((yield_inter_area_mu - calib_inter) / calib_slope);
      double yield_slope_mu;
      yield_slope_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 18;
      yield_slope_mu = ((yield_slope_area_mu - calib_inter) / calib_slope);
      for (int sym1__ = 1; sym1__ <= N_yield; ++sym1__) {
        vars__.emplace_back(yield_concs[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(yield_inter[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(yield_slope[(sym1__ - 1)]);}
      vars__.emplace_back(yield_inter_mu);
      vars__.emplace_back(yield_slope_mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double calib_slope_cent;
      calib_slope_cent = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      calib_slope_cent = context__.vals_r("calib_slope_cent")[(1 - 1)];
      double calib_inter_cent;
      calib_inter_cent = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      calib_inter_cent = context__.vals_r("calib_inter_cent")[(1 - 1)];
      double calib_sigma_cent;
      calib_sigma_cent = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      calib_sigma_cent = context__.vals_r("calib_sigma_cent")[(1 - 1)];
      double calib_sigma_cent_free__;
      calib_sigma_cent_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      calib_sigma_cent_free__ = stan::math::lb_free(calib_sigma_cent, 0);
      double yield_inter_area_mu;
      yield_inter_area_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      yield_inter_area_mu = context__.vals_r("yield_inter_area_mu")[(1 - 1)];
      double yield_inter_area_mu_free__;
      yield_inter_area_mu_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      yield_inter_area_mu_free__ = stan::math::lb_free(yield_inter_area_mu, 0);
      double yield_inter_area_sigma;
      yield_inter_area_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      yield_inter_area_sigma = context__.vals_r("yield_inter_area_sigma")[
          (1 - 1)];
      double yield_inter_area_sigma_free__;
      yield_inter_area_sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      yield_inter_area_sigma_free__ = stan::math::lb_free(
                                        yield_inter_area_sigma, 0);
      double yield_slope_area_mu;
      yield_slope_area_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      yield_slope_area_mu = context__.vals_r("yield_slope_area_mu")[(1 - 1)];
      double yield_slope_area_sigma;
      yield_slope_area_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      yield_slope_area_sigma = context__.vals_r("yield_slope_area_sigma")[
          (1 - 1)];
      double yield_slope_area_sigma_free__;
      yield_slope_area_sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      yield_slope_area_sigma_free__ = stan::math::lb_free(
                                        yield_slope_area_sigma, 0);
      Eigen::Matrix<double, -1, 1> yield_inter_area;
      yield_inter_area = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(yield_inter_area, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> yield_inter_area_flat__;
        current_statement__ = 8;
        assign(yield_inter_area_flat__, nil_index_list(),
          context__.vals_r("yield_inter_area"),
          "assigning variable yield_inter_area_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 8;
          assign(yield_inter_area,
            cons_list(index_uni(sym1__), nil_index_list()),
            yield_inter_area_flat__[(pos__ - 1)],
            "assigning variable yield_inter_area");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> yield_slope_area;
      yield_slope_area = Eigen::Matrix<double, -1, 1>(J);
      stan::math::fill(yield_slope_area, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> yield_slope_area_flat__;
        current_statement__ = 9;
        assign(yield_slope_area_flat__, nil_index_list(),
          context__.vals_r("yield_slope_area"),
          "assigning variable yield_slope_area_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 9;
          assign(yield_slope_area,
            cons_list(index_uni(sym1__), nil_index_list()),
            yield_slope_area_flat__[(pos__ - 1)],
            "assigning variable yield_slope_area");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      double yield_area_sigma;
      yield_area_sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      yield_area_sigma = context__.vals_r("yield_area_sigma")[(1 - 1)];
      double yield_area_sigma_free__;
      yield_area_sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      yield_area_sigma_free__ = stan::math::lb_free(yield_area_sigma, 0);
      vars__.emplace_back(calib_slope_cent);
      vars__.emplace_back(calib_inter_cent);
      vars__.emplace_back(calib_sigma_cent_free__);
      vars__.emplace_back(yield_inter_area_mu_free__);
      vars__.emplace_back(yield_inter_area_sigma_free__);
      vars__.emplace_back(yield_slope_area_mu);
      vars__.emplace_back(yield_slope_area_sigma_free__);
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(yield_inter_area[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.emplace_back(yield_slope_area[(sym1__ - 1)]);}
      vars__.emplace_back(yield_area_sigma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("calib_slope_cent");
    names__.emplace_back("calib_inter_cent");
    names__.emplace_back("calib_sigma_cent");
    names__.emplace_back("yield_inter_area_mu");
    names__.emplace_back("yield_inter_area_sigma");
    names__.emplace_back("yield_slope_area_mu");
    names__.emplace_back("yield_slope_area_sigma");
    names__.emplace_back("yield_inter_area");
    names__.emplace_back("yield_slope_area");
    names__.emplace_back("yield_area_sigma");
    names__.emplace_back("calib_slope");
    names__.emplace_back("calib_inter");
    names__.emplace_back("calib_sigma");
    names__.emplace_back("yield_concs");
    names__.emplace_back("yield_inter");
    names__.emplace_back("yield_slope");
    names__.emplace_back("yield_inter_mu");
    names__.emplace_back("yield_slope_mu");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_yield)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "calib_slope_cent");
    param_names__.emplace_back(std::string() + "calib_inter_cent");
    param_names__.emplace_back(std::string() + "calib_sigma_cent");
    param_names__.emplace_back(std::string() + "yield_inter_area_mu");
    param_names__.emplace_back(std::string() + "yield_inter_area_sigma");
    param_names__.emplace_back(std::string() + "yield_slope_area_mu");
    param_names__.emplace_back(std::string() + "yield_slope_area_sigma");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "yield_inter_area" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "yield_slope_area" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "yield_area_sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "calib_slope");
      param_names__.emplace_back(std::string() + "calib_inter");
      param_names__.emplace_back(std::string() + "calib_sigma");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_yield; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yield_concs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yield_inter" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yield_slope" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "yield_inter_mu");
      param_names__.emplace_back(std::string() + "yield_slope_mu");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "calib_slope_cent");
    param_names__.emplace_back(std::string() + "calib_inter_cent");
    param_names__.emplace_back(std::string() + "calib_sigma_cent");
    param_names__.emplace_back(std::string() + "yield_inter_area_mu");
    param_names__.emplace_back(std::string() + "yield_inter_area_sigma");
    param_names__.emplace_back(std::string() + "yield_slope_area_mu");
    param_names__.emplace_back(std::string() + "yield_slope_area_sigma");
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "yield_inter_area" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "yield_slope_area" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "yield_area_sigma");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "calib_slope");
      param_names__.emplace_back(std::string() + "calib_inter");
      param_names__.emplace_back(std::string() + "calib_sigma");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_yield; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yield_concs" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yield_inter" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yield_slope" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "yield_inter_mu");
      param_names__.emplace_back(std::string() + "yield_slope_mu");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"calib_slope_cent\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"calib_inter_cent\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"calib_sigma_cent\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yield_inter_area_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yield_inter_area_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yield_slope_area_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yield_slope_area_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yield_inter_area\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"parameters\"},{\"name\":\"yield_slope_area\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"parameters\"},{\"name\":\"yield_area_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"calib_slope\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"calib_inter\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"calib_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"yield_concs\",\"type\":{\"name\":\"vector\",\"length\":" << N_yield << "},\"block\":\"generated_quantities\"},{\"name\":\"yield_inter\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"generated_quantities\"},{\"name\":\"yield_slope\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"generated_quantities\"},{\"name\":\"yield_inter_mu\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"yield_slope_mu\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"calib_slope_cent\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"calib_inter_cent\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"calib_sigma_cent\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yield_inter_area_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yield_inter_area_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yield_slope_area_mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yield_slope_area_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"yield_inter_area\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"parameters\"},{\"name\":\"yield_slope_area\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"parameters\"},{\"name\":\"yield_area_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"calib_slope\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"calib_inter\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"calib_sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"yield_concs\",\"type\":{\"name\":\"vector\",\"length\":" << N_yield << "},\"block\":\"generated_quantities\"},{\"name\":\"yield_inter\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"generated_quantities\"},{\"name\":\"yield_slope\",\"type\":{\"name\":\"vector\",\"length\":" << J << "},\"block\":\"generated_quantities\"},{\"name\":\"yield_inter_mu\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"yield_slope_mu\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}

using stan_model = hierarchical_yield_coefficient_model_namespace::hierarchical_yield_coefficient_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return hierarchical_yield_coefficient_model_namespace::profiles__;
}

#endif


